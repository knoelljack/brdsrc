// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Required Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String    @unique
  emailVerified    DateTime?
  image            String?
  password         String? // For email/password auth
  resetToken       String? // Password reset token
  resetTokenExpiry DateTime? // Password reset token expiry
  location         String? // User location
  phone            String? // User phone number
  userType         String    @default("individual") // "individual" or "surf_shop"
  // Shop-specific fields
  shopName         String? // Full display name for shops (e.g., "Rider Shack Surf Shop")
  shopAddress      String? // Shop address
  shopWebsite      String? // Shop website URL
  shopDescription  String? // Shop description
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  accounts   Account[]
  sessions   Session[]
  surfboards Surfboard[]
  favorites  Favorite[] // User's favorite surfboards
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Surfboard {
  id          String   @id @default(cuid())
  title       String
  brand       String
  length      String
  condition   String
  price       Int
  images      String[] // Array of image URLs
  description String
  location    String
  city        String
  state       String
  latitude    Float? // Latitude coordinate
  longitude   Float? // Longitude coordinate
  status      String   @default("active") // active, pending, sold
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Link to user
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Favorites relation
  favoritedBy Favorite[]
}

model Favorite {
  id          String   @id @default(cuid())
  userId      String
  surfboardId String
  createdAt   DateTime @default(now())

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  surfboard Surfboard @relation(fields: [surfboardId], references: [id], onDelete: Cascade)

  @@unique([userId, surfboardId]) // Prevent duplicate favorites
}
